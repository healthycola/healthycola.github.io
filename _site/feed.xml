<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code, Bagels and Gibberish</title>
    <description>A small space for a newbie dev. Small and silly projects are always ongoing. Enjoy!</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 30 Jul 2014 17:24:54 -0400</pubDate>
    <lastBuildDate>Wed, 30 Jul 2014 17:24:54 -0400</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Jul 2014 00:07:55 -0400</pubDate>
        <link>http://yourdomain.com/jekyll/update/2014/07/30/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2014/07/30/welcome-to-jekyll/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Huffman Encoding Implementation</title>
        <description>&lt;p&gt;There was a fun little challenge on Reddit that I decided to partake in. I’m going to copy the challenge from &lt;a href=&quot;http://www.reddit.com/r/dailyprogrammer/comments/2b21mp/7182014_challenge_171_hard_intergalatic_bitstream/&amp;quot; target=&amp;quot;_blank&amp;quot;&quot;&gt;there&lt;/a&gt; for completion.
&lt;!--more--&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is 2114. We have colonized the Galaxy. To communicate we send 140 character max messages using [A-Z0-9 ]. The technology to do this requires faster than light pulses to beam the messages to relay stations.&lt;/p&gt;

  &lt;p&gt;Your challenge is to implement the compression for these messages. The design is very open and the solutions will vary.&lt;/p&gt;

  &lt;p&gt;Your goals:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Compact 140 Bytes down to a stream of bits to send and then decompact the message and verify 100% data contained.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;The goal is bit reduction. 140 bytes or less at 8 bits per byte so thats 1120 bits max. If you take a message of 140 bytes and compress it to 900 bits you have 220 less bits for 20% reduction.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I decided to take this as an excuse to implement the &lt;a href=&quot;http://en.wikipedia.org/wiki/Huffman_coding&quot; target=&quot;_blank&quot;&gt;Huffman Encoding&lt;/a&gt; technique that we learned about in school. &lt;/p&gt;

&lt;p&gt;This was the first time I had a chance to work with the map data structure in C++, so that was fun. Essentially, what I did was supply the program with a sample text from which it could extract frequency data of each of the characters. I realized after that I could have just wiki’d this, since frequency data for letters is &lt;a href=&quot;http://en.wikipedia.org/wiki/Letter_frequency&quot; target=&quot;_blank&quot;&gt;available&lt;/a&gt; online. Ah well…
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Once I generated the frequency list, I went ahead and created the tree using nodes. Each node contain a few things - frequency of that particular character (or parent), the value of the character if it was a leaf node, and the pointers to the left and right nodes (null upon initialization, and it remains null if they are leaf nodes).&lt;/p&gt;

&lt;p&gt;[code language=”cpp”]
void generateTree()
    {
        vector&amp;lt;HuffEncNode&lt;em&gt;&amp;gt; TreeNodes;
        for (map&amp;lt;char, int&amp;gt;::iterator it = frequencyChart.begin(); it != frequencyChart.end(); it++)
        {
            HuffEncNode&lt;/em&gt; leafNode = new HuffEncNode((it)-&amp;gt;first, (it)-&amp;gt;second);
            TreeNodes.push_back(leafNode);
        }
        sort(TreeNodes.begin(), TreeNodes.end(), HuffEncNode::compare);
        while (TreeNodes.size() &amp;gt; 1)
        {
            //Pop last two elements
            HuffEncNode* RightNode = TreeNodes.back();
            TreeNodes.pop_back();
            HuffEncNode* LeftNode = TreeNodes.back();
            TreeNodes.pop_back();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        HuffEncNode* parentNode = new HuffEncNode(RightNode-&amp;amp;gt;frequency + LeftNode-&amp;amp;gt;frequency, LeftNode, RightNode);
        TreeNodes.push_back(parentNode);
        sort(TreeNodes.begin(), TreeNodes.end(), HuffEncNode::compare);
    }
    parentNode = TreeNodes.front();


    //Generate the encoding map
    parentNode-&amp;amp;gt;generateCodes(&amp;amp;quot;&amp;amp;quot;, &amp;amp;amp;encodedMap);
} [/code]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The algorithm itself is described on the wikipedia page for Huffman encoding. The last bit of the code which says Generate the encoding map, essentially traverses down the tree and saves the codes for each character in a map for easier access during the encoding process. &lt;/p&gt;

&lt;p&gt;During the decoding process, the program would simply traverse down the tree based on the bit (1 or 0) until it hit a character. That’s the beauty of Huffman Encoding.&lt;/p&gt;

&lt;p&gt;[code language=”cpp”]
char deCode(string input, int* characterLocation)
        {
            if (leftNode == NULL &amp;amp;&amp;amp; rightNode == NULL)
            {
                //leaf node
                return ASCIIVal;
            }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if (input[*characterLocation] == &#39;0&#39;)
        {
            //go into the right node
            (*characterLocation)++;
            return rightNode-&amp;amp;gt;deCode(input, characterLocation);
        }
        else
        {
            //go into the left node
            (*characterLocation)++;
            return leftNode-&amp;amp;gt;deCode(input, characterLocation);
        }
    } [/code]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample that the challenge wanted us to use was as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;REMEMBER TO DRINK YOUR OVALTINE&lt;/li&gt;
&lt;li&gt;GIANTS BEAT DODGERS 10 TO 9 AND PLAY TOMORROW AT 1300&lt;/li&gt;
&lt;li&gt;SPACE THE FINAL FRONTIER THESE ARE THE VOYAGES OF THE BIT STREAM DAILY PROGRAMMER TO SEEK OUT NEW COMPRESSION&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using the test set above to train the Huffman encoding would defeat the purpose of the challenge, but I figured it would be a good benchmark to use. So developing the encoding tree with the test set above resulted in this:&lt;/p&gt;

&lt;pre&gt;
&lt;em&gt;&lt;strong&gt;The coding is as follows:&lt;/strong&gt;&lt;/em&gt;
  - 11
0 - 101010
1 - 0001011
2 - 00011111111111110
3 - 000111110
4 - 000111111111110
5 - 00011111111110
6 - 000111111110
7 - 00011111110
8 - 0001111110
9 - 00011110
A - 0110
B - 011110
C - 101011
D - 10100
E - 100
F - 011111
G - 000011
H - 000010
I - 01001
J - 0001111111110
K - 0001010
L - 000000
M - 01110
N - 01000
O - 0011
P - 000001
Q - 0001111111111110
R - 0101
S - 1011
T - 0010
U - 0001000
V - 0001001
W - 0001110
X - 000111111111111110
Y - 000110
Z - 000111111111111111

&lt;em&gt;&lt;strong&gt;Results are as follows:&lt;/strong&gt;&lt;/em&gt;
Read Message of 31 Bytes.
Compressing 248 Bits into 134 Bits. (45.9677% compression)
Sending Message
Decompressing Message into 31 Bytes.
Message Matches!

Read Message of 53 Bytes.
Compressing 424 Bits into 233 Bits. (45.0472% compression)
Sending Message
Decompressing Message into 53 Bytes.
Message Matches!

Read Message of 109 Bytes.
Compressing 872 Bits into 449 Bits. (48.5092% compression)
Sending Message
Decompressing Message into 109 Bytes.
Message Matches!
Program ended with exit code: 0
&lt;/pre&gt;

&lt;p&gt;Training the Huffman Tree with an ebook I found on &lt;a href=&quot;http://gutenberg.org&quot; target=&quot;_blank&quot;&gt;Project Gutenberg&lt;/a&gt; worked fairly well for me. Here are the results:&lt;/p&gt;

&lt;pre&gt;
&lt;em&gt;&lt;strong&gt;The coding is as follows:&lt;/strong&gt;&lt;/em&gt;
  - 000
0 - 111010101
1 - 11101011
2 - 111010001
3 - 111010100
4 - 0100011101
5 - 0100011111
6 - 1110100111
7 - 1110100100
8 - 1110100101
9 - 01000111000
A - 0101
B - 100111
C - 10010
D - 11100
E - 110
F - 001101
G - 010000
H - 1111
I - 0111
J - 0100011110
K - 01000110
L - 01001
M - 001111
N - 1000
O - 0110
P - 001110
Q - 1110100110
R - 1011
S - 1010
T - 0010
U - 001100
V - 0100010
W - 100110
X - 111010000
Y - 111011
Z - 01000111001

&lt;em&gt;&lt;strong&gt;Results are as follows:&lt;/strong&gt;&lt;/em&gt;
Read Message of 31 Bytes.
Compressing 248 Bits into 135 Bits. (45.5645% compression)
Sending Message
Decompressing Message into 31 Bytes.
Message Matches!

Read Message of 53 Bytes.
Compressing 424 Bits into 253 Bits. (40.3302% compression)
Sending Message
Decompressing Message into 53 Bytes.
Message Matches!

Read Message of 109 Bytes.
Compressing 872 Bits into 449 Bits. (48.5092% compression)
Sending Message
Decompressing Message into 109 Bytes.
Message Matches!
&lt;/pre&gt;

&lt;p&gt;Not bad! The bench mark gives 46%, 45% and 48.5%. On the other side, I get compression rates of 45.6%, 40.33% and 48.5%. Not bad! Seems like the main issue with the ebook text I used was with the numbers. &lt;/p&gt;

&lt;p&gt;Anyway, I’m gonna head to sleep, but that was fun! Gotta refine the project files up. &lt;del datetime=&quot;2014-07-24T21:09:48+00:00&quot;&gt;I’ll do that later&lt;/del&gt;. &lt;ins datetime=&quot;2014-07-24T21:09:48+00:00&quot;&gt;&lt;a href=&quot;https://github.com/healthycola/HuffmanEncode&quot; target=&quot;_blank&quot;&gt;They’re up now&lt;/a&gt;.&lt;/ins&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/c++/2014/07/24/huffman-encoding-implementation/</link>
        <guid isPermaLink="true">http://yourdomain.com/c++/2014/07/24/huffman-encoding-implementation/</guid>
        
        <category>algorithm</category>
        
        <category>C++</category>
        
        <category>encoding</category>
        
        <category>huffman</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Squatting!</title>
        <description>I&#39;ve been doing the &lt;a href=&quot;http://stronglifts.com/5x5/&quot; target=&quot;_blank&quot;&gt;SL 5x5&lt;/a&gt; for a few weeks now and I&#39;m really enjoying it (especially since it&#39;s Ramadan right now). &lt;/p&gt;

I&#39;ve struggled with getting my squats perfect and often feel like I&#39;m straining my lower back when performing them, which can be very dangerous in the long run. That being said, today I found a really great video that shows how to do lower bar squats safely.
[youtube https://www.youtube.com/watch?v=RMFHgVN_pcg&amp;amp;w=560&amp;amp;h=315]&lt;/p&gt;

As of today, my weights are as follows (all 5 rep in lbs):
Squats: 155
Bench: 155
Barbell Row: 115
Overhead Press: 80
DeadLift: 125&lt;/p&gt;

I&#39;ve been feeling stronger too, so I really hope this regime is a good path for me.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/fitness/powerlifting/weightlifting/2014/07/22/squatting/</link>
        <guid isPermaLink="true">http://yourdomain.com/fitness/powerlifting/weightlifting/2014/07/22/squatting/</guid>
        
        
        <category>fitness</category>
        
        <category>powerlifting</category>
        
        <category>weightlifting</category>
        
      </item>
    
      <item>
        <title>Autocomplete / Word Predictor / Simple Trie</title>
        <description>Decided to code up a Simple Trie for kicks. The code is still in the works, but can be accessed on git &lt;a href=&quot;https://github.com/healthycola/SimpleWordPredictor/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

I had never coded something of nature before, so this was a fun exercise in recursion. A description of a Trie was on &lt;a href=&quot;http://en.wikipedia.org/wiki/Trie&quot; target=&quot;_blank&quot;&gt;wiki&lt;/a&gt;, but I found the description described in &lt;a href=&quot;http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; site more comprehensible.&lt;/p&gt;
&lt;blockquote&gt;
A trie (from retrieval), is a multi-way tree structure useful for storing strings over an alphabet. It has been used to store large dictionaries of English (say) words in spelling-checking programs and in natural-language &quot;understanding&quot; programs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;&lt;/p&gt;

For reference, the insert method was fairly simple. It included simply advancing a pointer to the current character of the word that we&#39;d like to add by one. If the node for the next letter was in the tree then we would just go down the tree. Otherwise, we&#39;d add it to the tree and continue until the end of the word, where we would have an end node.&lt;/p&gt;

[code language=&quot;cpp&quot;]
        void insert(string word, int charLocation)
        {
            //cout &amp;lt;&amp;lt; word &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
            if (charLocation == word.length())
            {
                //last letter
                node* EndNode = new node(&#39;&amp;#092;&amp;#048;&#39;);
                children.push_back(EndNode);
                return;
            }
            else
            {
                vector&amp;lt;node*&amp;gt;::iterator child;
                for (child = children.begin(); child != children.end(); child++)
                {
                    if ((*child)-&amp;gt;val == word[charLocation])
                        break;
                }&lt;/p&gt;

                if (child == children.end())
                {
                    node* middleNode = new node(word[charLocation]);
                    children.push_back(middleNode);
                    totalNodes++;
                    return middleNode-&amp;gt;insert(word, charLocation + 1);
                }
                else
                {
                    return (*child)-&amp;gt;insert(word, charLocation + 1);
                }
            }
        }
[/code]&lt;/p&gt;

Retrieval was a bit more of a challenge. Given a small input string, the challenge was to find out all the possible words. This, I&#39;m sure can be implemented in a better way than I have. What I do is, basically traverse the tree until I get to the last character of the input string. Then I want to retrieve all the words that branch from that character. It sounds okay in theory, but I think my implementation can be improved.&lt;/p&gt;

[code language=&quot;cpp&quot;]string retrieve(string input, int charLocation)
        {
            string output = &amp;quot;&amp;quot;;
            if (charLocation &amp;lt;= input.length() - 1)
            {
                //Get to correct branch
                vector&amp;lt;node*&amp;gt;::iterator child;
                for (child = children.begin(); child != children.end(); child++)
                {
                    if ((*child)-&amp;gt;val == input[charLocation])
                        break;
                }
                if (child == children.end())
                    return &amp;quot;&amp;quot;;
                else
                {
                    return (*child)-&amp;gt;retrieve(input, charLocation + 1);
                }
            }
            else if (val == &#39;&amp;#092;&amp;#048;&#39;)
            {
                return input + &amp;quot;\n&amp;quot;;
            }
            else if (charLocation == input.length())
            {
                for (vector&amp;lt;node*&amp;gt;::iterator child = children.begin(); child != children.end(); child++)
                {
                    output += (*child)-&amp;gt;retrieve(input, charLocation + 1);
                }
                return output;
            }
            else
            {
                //All the subsequent strings will be recommendations
                for (vector&amp;lt;node*&amp;gt;::iterator child = children.begin(); child != children.end(); child++)
                {
                    output += (*child)-&amp;gt;retrieve(input + val, charLocation + 1);
                }
                return output;
            }
        }
[/code]&lt;/p&gt;

A sample run of the program for a list of 200 words (which is up on the Git page) is shown below.
[code]Enter the filePath: wordList.txt
Trie was populated. Total notes created were 613
Enter a stream and we will tell you what words are possible. Enter quit to exit.
ga
Next Word: lo
Next Word: li
little
live
line
light
life
list
Next Word: ab
above
Next Word: tr
try
tree
Next Word: quit
Program ended with exit code: 0
[/code]&lt;/p&gt;

All in all this was a fun exercise. I think I&#39;ll include weights to the words so that they are sorted in a smarter order than this. Still a WIP!&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/c++/trie/2014/07/22/autocomplete-word-predictor-simple-trie/</link>
        <guid isPermaLink="true">http://yourdomain.com/c++/trie/2014/07/22/autocomplete-word-predictor-simple-trie/</guid>
        
        
        <category>c++</category>
        
        <category>trie</category>
        
      </item>
    
      <item>
        <title>2D Matrix Rotator</title>
        <description>Simple challenge was &lt;a href=&quot;http://www.reddit.com/r/dailyprogrammer/comments/29i9jw/6302014_challenge_169_easy_90_degree_2d_array/&quot;&gt;posted&lt;/a&gt; up on reddit.&lt;/p&gt;

There was a really simple solution to it which would perform the task with O(n&lt;sup&gt;2&lt;/sup&gt;) space and O(n&lt;sup&gt;2&lt;/sup&gt;) time. It would involve creating a new array with the same dimensions as the original matrix, and copying the values into their new spots.&lt;/p&gt;

I wanted to do better than this solution and thought of an onion-method to do it. It would include starting with the outside layer of the matrix, and switching the numbers with their new spots for the four sides. For instance, if the following was the matrix:
&lt;code&gt;
|  1  |  2  |  3  |  4  |
|  5  |  6  |  7  |  8  |
|  9  |  10 |  11 |  12 |
|  13 |  14 |  15 |  16 |
&lt;/code&gt;
In the first layer, for the first iteration, 1 would move to 4s position, 4 would move to 16, 16 would move to 13s position, and 13 would move to 1s position. Iterating through all n - 1 numbers of the layer, (i.e. 1 to 3), the outer layer would have been rotated. Moving down inwards in similar fashion will have switched the entire matrix.
&lt;!--more--&gt;&lt;/p&gt;

Let&#39;s get to the code:
[code language=&quot;cpp&quot;]
#include &amp;amp;lt;iostream&amp;amp;gt;
#include &amp;amp;lt;string&amp;amp;gt;
#include &amp;amp;lt;vector&amp;amp;gt;
#include &amp;amp;lt;math.h&amp;amp;gt;
using namespace std;&lt;/p&gt;

// Slightly modified from the original tokenizeString in RummyChecker. This version converts the strings directly into integers
static const vector&amp;amp;lt;int&amp;amp;gt; tokenizeStrings(string input, string delimiter, int NumberOfSpacesAfterDelimiter)
{
    vector&amp;amp;lt;int&amp;amp;gt; output;
    size_t start;
    size_t found = -1 - NumberOfSpacesAfterDelimiter;  //Two because of spaces after delimiter
    string temp;
    do {
        start = found + 1 + NumberOfSpacesAfterDelimiter;  //Two because of spaces
        found = input.find_first_of(delimiter, start);
        temp = input.substr(start, found - start);
        output.push_back(atoi(&amp;amp;amp;temp[0]));
    } while(found != string::npos);
    return output;
}&lt;/p&gt;

void printMatrix(int* matrix, int N)
{
    cout &amp;amp;lt;&amp;amp;lt; &amp;amp;quot;\n&amp;amp;quot;;
    for (int r = 0; r &amp;amp;lt; N; r++)
    {
        for (int c = 0; c &amp;amp;lt; N; c++)
        {
            cout &amp;amp;lt;&amp;amp;lt; matrix[r*N + c] &amp;amp;lt;&amp;amp;lt; &amp;amp;quot; &amp;amp;quot;;
        }
        cout &amp;amp;lt;&amp;amp;lt; &amp;amp;quot;\n&amp;amp;quot;;
    }
}
void rotateMatrix(int* matrix, int N)
{
    //Work from outside, and rotate inwards
    double layerLimit = (double)N/2.0;
    for (int layer = 1; layer &amp;amp;lt;= ceil(layerLimit); layer++)
    {
        int tempSource, tempTarget, tempIndex1, tempIndex2;
        for (int i = 0; i &amp;amp;lt; N - 2*layer + 1; i++)
        {
            tempIndex1 = (layer - 1)*N - 1 + layer + i;
            tempIndex2 = (layer - 1)*N + N*(i + 1) -layer;
            tempTarget = matrix[tempIndex2];
            matrix[tempIndex2] = matrix[tempIndex1];
            tempSource = tempTarget;
            tempIndex2 = N*N - (layer - 1)*N - layer - i;
            tempTarget = matrix[tempIndex2];
            matrix[tempIndex2] = tempSource;
            tempSource = tempTarget;
            tempIndex2 = N*(N - i - 1) - (layer - 1)*N + layer - 1;
            tempTarget = matrix[tempIndex2];
            matrix[tempIndex2] = tempSource;
            matrix[tempIndex1] = tempTarget;
        }
    }
}&lt;/p&gt;

int main(int argc, char** argv)
{
    int* TwoDArr = nullptr;
    int N = 0;
    string input;
    cout &amp;amp;lt;&amp;amp;lt; &amp;amp;quot;N = &amp;amp;quot;;
    getline(cin, input);
    N = atoi(&amp;amp;amp;input[0]);
    TwoDArr = new int[N*N];
    cout &amp;amp;lt;&amp;amp;lt; &amp;amp;quot;What is the array?:\n&amp;amp;quot;;
    for (int i = 0; i &amp;amp;lt; N; i++)
    {
        getline(cin, input);
        memcpy(&amp;amp;amp;TwoDArr[i*N], &amp;amp;amp;(tokenizeStrings(input, &amp;amp;quot; &amp;amp;quot;, 0))[0], sizeof(int) * N);
    }
    cout &amp;amp;lt;&amp;amp;lt; &amp;amp;quot;rotate? y/n: \n&amp;amp;quot;;
    getline(cin, input);
    while (input == &amp;amp;quot;y&amp;amp;quot;)
    {
        rotateMatrix(TwoDArr, N);&lt;/p&gt;

        printMatrix(TwoDArr, N);
        cout &amp;amp;lt;&amp;amp;lt; &amp;amp;quot;rotate? y/n: \n&amp;amp;quot;;
        getline(cin, input);
    }
    //cleanup
    delete[] TwoDArr;
    return 0;
}
[/code]&lt;/p&gt;

Looking at the code above, the main loop runs for &lt;code&gt;N/2&lt;/code&gt; times while the inner loop runs for &lt;code&gt;N - 2*N/2 + 1&lt;/code&gt; times. Total time is then O(N/2*(N-N+1)) which is O(N). And the space requirement is O(1). I guess mission accomplished! :)&lt;/p&gt;

Here is a sample of the output:
&lt;code&gt;
N = 10
What is the array?:
1 2 3 4 5 6 7 8 9 0
0 9 8 7 6 5 4 3 2 1
1 3 5 7 9 2 4 6 8 0
0 8 6 4 2 9 7 5 3 1
0 1 2 3 4 5 4 3 2 1
9 8 7 6 5 6 7 8 9 0
1 1 1 1 1 1 1 1 1 1
2 2 2 2 2 2 2 2 2 2
9 8 7 6 7 8 9 8 7 6
0 0 0 0 0 0 0 0 0 0
rotate? y/n:
y&lt;/p&gt;

0 9 2 1 9 0 0 1 0 1
0 8 2 1 8 1 8 3 9 2
0 7 2 1 7 2 6 5 8 3
0 6 2 1 6 3 4 7 7 4
0 7 2 1 5 4 2 9 6 5
0 8 2 1 6 5 9 2 5 6
0 9 2 1 7 4 7 4 4 7
0 8 2 1 8 3 5 6 3 8
0 7 2 1 9 2 3 8 2 9
0 6 2 1 0 1 1 0 1 0
rotate? y/n:
y&lt;/p&gt;

0 0 0 0 0 0 0 0 0 0
6 7 8 9 8 7 6 7 8 9
2 2 2 2 2 2 2 2 2 2
1 1 1 1 1 1 1 1 1 1
0 9 8 7 6 5 6 7 8 9
1 2 3 4 5 4 3 2 1 0
1 3 5 7 9 2 4 6 8 0
0 8 6 4 2 9 7 5 3 1
1 2 3 4 5 6 7 8 9 0
0 9 8 7 6 5 4 3 2 1
rotate? y/n:
y&lt;/p&gt;

0 1 0 1 1 0 1 2 6 0
9 2 8 3 2 9 1 2 7 0
8 3 6 5 3 8 1 2 8 0
7 4 4 7 4 7 1 2 9 0
6 5 2 9 5 6 1 2 8 0
5 6 9 2 4 5 1 2 7 0
4 7 7 4 3 6 1 2 6 0
3 8 5 6 2 7 1 2 7 0
2 9 3 8 1 8 1 2 8 0
1 0 1 0 0 9 1 2 9 0
rotate? y/n:
y&lt;/p&gt;

1 2 3 4 5 6 7 8 9 0
0 9 8 7 6 5 4 3 2 1
1 3 5 7 9 2 4 6 8 0
0 8 6 4 2 9 7 5 3 1
0 1 2 3 4 5 4 3 2 1
9 8 7 6 5 6 7 8 9 0
1 1 1 1 1 1 1 1 1 1
2 2 2 2 2 2 2 2 2 2
9 8 7 6 7 8 9 8 7 6
0 0 0 0 0 0 0 0 0 0
rotate? y/n: n&lt;/p&gt;

Program exited with code 0.
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/c++/2014/07/16/2d-matrix-rotator/</link>
        <guid isPermaLink="true">http://yourdomain.com/c++/2014/07/16/2d-matrix-rotator/</guid>
        
        <category>C++</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Simple RummyChecker</title>
        <description>This is a build up on the BlackJack Checker. The Rummy Checker challenge is also from Reddit and can be found &lt;a href=&quot;http://www.reddit.com/r/dailyprogrammer/comments/2a9u0a/792014_challenge_170_intermediate_rummy_checker/&quot;&gt;here&lt;/a&gt;. I think it&#39;s more organized than the blackjack checker and less hacky (except for the Run checker function - this function is soooo messy. I need to fix it, urgh).&lt;/p&gt;

Major things I&#39;m happy about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple tokenizer - It&#39;s just good to have this code. I think it&#39;s reusable.&lt;/li&gt;
&lt;li&gt;Decent organization - A Card class and a Hand class was created. I think the organization is decent, not amazing, but it&#39;s getting there.&lt;/li&gt;
&lt;/ul&gt;

Areas I need to improve on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rummy Run Detector - At the moment it&#39;s really brute-forcy. Gotta think of a better idea to go about it.&lt;/li&gt;
&lt;li&gt;Separation - Could use better separation between input and output areas of the program, just for good coding practice.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;&lt;/p&gt;

[code language=&quot;cpp&quot;]
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;string&amp;gt;&lt;/p&gt;

using namespace std;
int RunLength = 3;
int SetLength = 3;&lt;/p&gt;

enum Suite
{
    Spades, Hearts, Clubs, Diamonds, Unknown
};&lt;/p&gt;

static const vector&amp;lt;string&amp;gt; tokenizeStrings(string input, string delimiter, int NumberOfSpacesAfterDelimiter)
{
    vector&amp;lt;string&amp;gt; output;
    size_t start;
    size_t found = -1 - NumberOfSpacesAfterDelimiter;  //Two because of spaces after delimiter
    string temp;
    do {
        start = found + 1 + NumberOfSpacesAfterDelimiter;  //Two because of spaces
        found = input.find_first_of(delimiter, start);
        temp = input.substr(start, found - start);
        output.push_back(temp);
    } while(found != string::npos);
    return output;
}&lt;/p&gt;

struct Card
{
    Suite m_suite;
    int m_value;&lt;/p&gt;

    static const string CardValues[13];
    static const string CardSuits[4];
    static const int ConvertCardValueToInt(string Card)
    {
        int output = 0;
        if (Card == &amp;quot;ace&amp;quot;){
            output = 1;
        }
        else if (Card == &amp;quot;king&amp;quot;){
            output = 13;
        }
        else if (Card == &amp;quot;queen&amp;quot;){
            output = 12;
        }
        else if (Card == &amp;quot;jack&amp;quot;){
            output = 11;
        }
        else if (Card == &amp;quot;ten&amp;quot;){
            output = 10;
        }
        else if (Card == &amp;quot;nine&amp;quot;){
            output = 9;
        }
        else if (Card == &amp;quot;eight&amp;quot;){
            output = 8;
        }
        else if (Card == &amp;quot;seven&amp;quot;){
            output = 7;
        }
        else if (Card == &amp;quot;six&amp;quot;){
            output = 6;
        }
        else if (Card == &amp;quot;five&amp;quot;){
            output = 5;
        }
        else if (Card == &amp;quot;four&amp;quot;){
            output = 4;
        }
        else if (Card == &amp;quot;three&amp;quot;){
            output = 3;
        }
        else if (Card == &amp;quot;two&amp;quot;){
            output = 2;
        }
        else
        {
            output = 0;
        }
        return output;
    }&lt;/p&gt;

    static const string ConvertIntToCardValue(int Val)
    {
        if (Val &amp;gt; 0 &amp;amp;&amp;amp; Val &amp;lt;= 13)
            return CardValues[Val - 1];&lt;/p&gt;

        return &amp;quot;&amp;quot;;
    }&lt;/p&gt;

    static const Suite ConvertCardStringToSuite(string input)
    {
        Suite s = Unknown;
        if (input == &amp;quot;spades&amp;quot;)
            s = Spades;
        else if (input == &amp;quot;hearts&amp;quot;)
            s = Hearts;
        else if (input == &amp;quot;clubs&amp;quot;)
            s = Clubs;
        else if (input == &amp;quot;diamonds&amp;quot;)
            s = Diamonds;&lt;/p&gt;

        return s;
    }&lt;/p&gt;

    static const string ConvertCardSuitToString(Suite input)
    {
        if (input &amp;gt;= 0 &amp;amp;&amp;amp; input &amp;lt;= 3)
            return CardSuits[input];&lt;/p&gt;

        return &amp;quot;&amp;quot;;
    }&lt;/p&gt;

    Card(string CardInput)
    {
        //Accepts inputs such as Ace of Diamonds
        vector&amp;lt;string&amp;gt; temp = tokenizeStrings(CardInput, &amp;quot; &amp;quot;, 0);
        m_value = ConvertCardValueToInt(temp[0]);
        m_suite = ConvertCardStringToSuite(temp[2]);
    }
};&lt;/p&gt;

const string Card::CardValues[13] = { &amp;quot;ace&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;, &amp;quot;five&amp;quot;, &amp;quot;six&amp;quot;, &amp;quot;seven&amp;quot;, &amp;quot;eight&amp;quot;, &amp;quot;nine&amp;quot;, &amp;quot;ten&amp;quot;, &amp;quot;jack&amp;quot;, &amp;quot;queen&amp;quot;, &amp;quot;king&amp;quot; };
const string Card::CardSuits[4] = { &amp;quot;spades&amp;quot;, &amp;quot;hearts&amp;quot;, &amp;quot;clubs&amp;quot;, &amp;quot;diamonds&amp;quot; };&lt;/p&gt;

template &amp;lt;class T&amp;gt;
void deletePtr(T* ptr)
{
    delete ptr;
}&lt;/p&gt;

struct Hand
{
    vector&amp;lt;Card*&amp;gt; m_hand;
    void AddCard(Card *card)
    {
        m_hand.push_back(card);
    }&lt;/p&gt;

    void cleanUp()
    {
        for_each(m_hand.begin(), m_hand.end(), deletePtr&amp;lt;Card&amp;gt;);
    }&lt;/p&gt;

    static bool sorter(Card* i, Card* j)
    {
        if (i-&amp;gt;m_suite != j-&amp;gt;m_suite)
            return (int)(i-&amp;gt;m_suite) &amp;lt; (int)(j-&amp;gt;m_suite);
        else
            return i-&amp;gt;m_value &amp;lt; j-&amp;gt;m_value;
    }&lt;/p&gt;

    void sortHand()
    {
        sort(m_hand.begin(), m_hand.end(), Hand::sorter);
    }&lt;/p&gt;

    Card* CheckForSet(Card _card)
    {
        int NewSet = _card.m_value;
        int NumberOfCardsForSet = 1;
        for (vector&amp;lt;Card*&amp;gt;::iterator card = m_hand.begin(); card != m_hand.end(); card++)
        {
            if ((*card)-&amp;gt;m_value == NewSet)
                NumberOfCardsForSet++;
        }
        if (NumberOfCardsForSet &amp;gt;= SetLength)
        {
            // Means we have a set
            for (vector&amp;lt;Card*&amp;gt;::iterator card = m_hand.begin(); card != m_hand.end(); card++)
            {
                if ((*card)-&amp;gt;m_value != NewSet)
                    return *card;
            }
        }
        return nullptr;
    }&lt;/p&gt;

    Card* CheckForRun(Card _card)
    {
        //Messy as hell
        vector&amp;lt;Card*&amp;gt; Run;
        bool isRun = false;
        for (vector&amp;lt;Card*&amp;gt;::iterator card = m_hand.begin(); card != m_hand.end(); card++)
        {
            isRun = false;
            if ((*card)-&amp;gt;m_suite != _card.m_suite)
            {
                continue;
            }&lt;/p&gt;

            Run.clear();
            Run.push_back(&amp;amp;_card);
            for (vector&amp;lt;Card*&amp;gt;::iterator card_set = card; card_set != m_hand.end(); card_set++)
            {
                if (Run.size() &amp;gt;= RunLength || (*card_set)-&amp;gt;m_suite != _card.m_suite)
                    break;
                Run.push_back((*card_set));
            }&lt;/p&gt;

            if (Run.size() &amp;lt; RunLength)
            {
                //No runs possible
                isRun = false;
                break;
            }&lt;/p&gt;

            sort(Run.begin(), Run.end(), sorter);
            if ((*(Run.end()-1))-&amp;gt;m_value - (*(Run.begin()))-&amp;gt;m_value == RunLength - 1)
                isRun = true;&lt;/p&gt;

            //Found a Run?
            if (isRun)
            {
                vector&amp;lt;Card*&amp;gt;::iterator cardReturn = m_hand.begin();
                for (; cardReturn != m_hand.end(); cardReturn++)
                {
                    bool foundCardReturn = true;
                    for (vector&amp;lt;Card*&amp;gt;::iterator set_check = Run.begin(); set_check != Run.end() - 1; set_check++)
                    {
                        //CHeck if current cardReturn is in the Run.
                        if (*set_check == &amp;amp;_card)
                            continue;&lt;/p&gt;

                        if (*cardReturn == *set_check)
                        {
                            // The card we want to return can&#39;t be in the set
                            foundCardReturn = false;
                            break;
                        }
                    }
                    if (foundCardReturn)
                    {
                        return *cardReturn;
                    }
                }
                break;
            }
        }&lt;/p&gt;

        return nullptr;
    }
};&lt;/p&gt;

void outputWin(Card* card)
{
    if (card)
    {
        cout &amp;lt;&amp;lt; &amp;quot;Swap the new card with &amp;quot; &amp;lt;&amp;lt; Card::ConvertIntToCardValue(card-&amp;gt;m_value) &amp;lt;&amp;lt; &amp;quot; of &amp;quot; &amp;lt;&amp;lt; Card::ConvertCardSuitToString(card-&amp;gt;m_suite) &amp;lt;&amp;lt; &amp;quot; to win!\n&amp;quot;;
    }
    else
    {
        printf(&amp;quot;No possible winning hand.\n&amp;quot;);
    }&lt;/p&gt;

}&lt;/p&gt;

int main(int argc, char** argv)
{
    //string sampleString = &amp;quot;Two of Diamonds, Three of Diamonds, Four of Diamonds, Seven of Diamonds, Seven of Clubs, Seven of Hearts, Jack of Hearts&amp;quot;;
    //string newCard = &amp;quot;Five of Diamonds&amp;quot;;&lt;/p&gt;

    string sampleString, newCard;
    cout &amp;lt;&amp;lt; &amp;quot;What is the initial hand?: &amp;quot;;
    getline(cin, sampleString);
    cout &amp;lt;&amp;lt; &amp;quot;What is the added hand?: &amp;quot;;
    getline(cin, newCard);&lt;/p&gt;

    Hand myHand;
    //transform everything to lower case
    transform(sampleString.begin(), sampleString.end(), sampleString.begin(), ::tolower);
    transform(newCard.begin(), newCard.end(), newCard.begin(), ::tolower);
    vector&amp;lt;string&amp;gt; hand = tokenizeStrings(sampleString, &amp;quot;,:&amp;quot;, 1);&lt;/p&gt;

    // For each of the cards, we need to create cards out of them
    for (vector&amp;lt;string&amp;gt;::iterator _card = hand.begin(); _card != hand.end(); _card++)
        myHand.AddCard(new Card(*_card));
    myHand.sortHand();&lt;/p&gt;

    Card* swappableCard = new Card(newCard);&lt;/p&gt;

    cout &amp;lt;&amp;lt; &amp;quot;Checking for a run with length &amp;quot; &amp;lt;&amp;lt; RunLength &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    Card* swappedCard = myHand.CheckForRun(*swappableCard);
    outputWin(swappedCard);&lt;/p&gt;

    cout &amp;lt;&amp;lt; &amp;quot;Checking for a set with length &amp;quot; &amp;lt;&amp;lt; SetLength &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    swappedCard = myHand.CheckForSet(*swappableCard);
    outputWin(swappedCard);&lt;/p&gt;

    RunLength = 4;
    cout &amp;lt;&amp;lt; &amp;quot;Checking for a run with length &amp;quot; &amp;lt;&amp;lt; RunLength &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    swappedCard = myHand.CheckForRun(*swappableCard);
    outputWin(swappedCard);&lt;/p&gt;

    SetLength = 4;
    cout &amp;lt;&amp;lt; &amp;quot;Checking for a set with length &amp;quot; &amp;lt;&amp;lt; SetLength &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
    swappedCard = myHand.CheckForSet(*swappableCard);
    outputWin(swappedCard);&lt;/p&gt;

    //Clean up
    delete swappableCard;
    myHand.cleanUp();&lt;/p&gt;

    return 0;
}
[/code]&lt;/p&gt;

Here&#39;s a sample of an input and output:&lt;/p&gt;
&lt;pre&gt;What is the initial hand?: Two of Diamonds, Three of Diamonds, Four of Diamonds, Seven of Diamonds, Seven of Clubs, Seven of Hearts, Jack of Hearts
What is the added hand?: Five of Diamonds
Checking for a run with length 3
Swap the new card with seven of hearts to win!
Checking for a set with length 3
No possible winning hand.
Checking for a run with length 4
Swap the new card with seven of hearts to win!
Checking for a set with length 4
No possible winning hand.
&lt;/pre&gt;

&lt;span style=&quot;text-decoration:underline;&quot;&gt;&lt;strong&gt;A brief explanation on the two checker methods&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;em&gt;Set Checker:&lt;/em&gt;
Simply go through the hand and count the number of cards with the same value as the new card. If it exceeds 3 of 4, then you have a set. Then just go through the hand once more and swap with the first card that isn&#39;t the same value as the new card.&lt;/p&gt;

&lt;em&gt;Run Checker:
&lt;/em&gt;This code is significantly more messy. Let&#39;s see. Go through each card in the (sorted) hand until you get to the same suit as the new card. (Aside: the sort method that I&#39;ve implemented, sorts the hands in terms of values grouped with their individual suits). Then, depending on if we&#39;re checking for a 3 card or 4 card run, we create a temporary second set called a Run (which is essentially a vector of cards).
We insert the new card in, and then insert the next 2 to 3 cards in depending on the length of the run we&#39;re interested in. When we&#39;re doing this, and we encounter a card with a different suit than our new card, we know that a run isn&#39;t possible since we&#39;ve hit a new suit in a sorted hand, so break out of the function. If we are successful in adding the right number of cards, we sort this mini hand. Then we subtract the largest value from the smallest value, and the result should be the length of the run we are interested in minus 1. So for instance, if we are interested in a run of 4 cards, and we have 3, 4, 5, 6 of the same suit, then 6 - 3 would give us 3. Now if this is the case, then we have successfully found a run!
To find a card we can remove from the hand, I use the brute force method. Which means going through the hand once again and as soon as I hit a card which is not in the mini-hand, I can discard that card.
&lt;em&gt;Clearly this method can be improved upon....&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/c++/2014/07/14/simple-rummychecker/</link>
        <guid isPermaLink="true">http://yourdomain.com/c++/2014/07/14/simple-rummychecker/</guid>
        
        <category>C++</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Simple BlackJackChecker</title>
        <description>Wanted to add something very quick before heading to bed. I&#39;m going to edit this post when I wake up. Here&#39;s my first take on &lt;a href=&quot;http://www.reddit.com/r/dailyprogrammer/comments/29zut0/772014_challenge_170_easy_blackjack_checker/&quot; title=&quot;Reddit&#39;s simple blackjack checker&quot;&gt;Reddit&#39;s simple blackjack checker&lt;/a&gt;. Seems to work, and I think it&#39;s fairly elegant, tbh, but I&#39;ll have a better look when it&#39;s not 6 in the morning :).&lt;/p&gt;

Edit: I was reading the code again today. Some of the things I would change are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spit the work into input phase and output phase. In input phase, simply store the strings. I feel like that&#39;s probably good programming practice.&lt;/li&gt;
&lt;li&gt;Reduce the number of lines in main, although there are that many. Split the different areas into functions.&lt;/li&gt;
&lt;li&gt;Add more objected orientedness to make this more tidy. It&#39;s a little bit messy right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;&lt;/p&gt;

[code language=&quot;cpp&quot;]
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;&lt;/p&gt;

using namespace std;&lt;/p&gt;

struct Player
{
    string Name = &amp;quot;&amp;quot;;
    int currentTotal = 0;
    int bestTotal = 0;
    int Aces = 0;
    bool folded = false;
    int NumberOfCards = 0;
    void AddValue(int val)
    {
        if (val == 1)
            Aces++;
        else
            currentTotal += val;&lt;/p&gt;

        bestTotal = getBestTotal();
        if (bestTotal &amp;gt; 21)
            folded = true;
        NumberOfCards++;
    }
    int getBestTotal()
    {
        int tempTotal = currentTotal;
        int tempAces = Aces;
        if (tempAces &amp;gt; 1)
        {
            //The other aces need to be 1s to get the best value so
            tempTotal += (tempAces - 1);
            tempAces = 1;
        }
        if ( tempTotal + tempAces*11 &amp;lt;= 21)
            return tempTotal + tempAces * 11;
        else
            return tempTotal + tempAces;
    }&lt;/p&gt;

};&lt;/p&gt;

int ConvertCardToInt(string Card)
{
    int output = 0;
    if (Card == &amp;quot;Ace&amp;quot;){
        output = 1;
    }
    else if (Card == &amp;quot;King&amp;quot;){
        output = 10;
    }
    else if (Card == &amp;quot;Queen&amp;quot;){
        output = 10;
    }
    else if (Card == &amp;quot;Jack&amp;quot;){
        output = 10;
    }
    else if (Card == &amp;quot;Ten&amp;quot;){
        output = 10;
    }
    else if (Card == &amp;quot;Nine&amp;quot;){
        output = 9;
    }
    else if (Card == &amp;quot;Eight&amp;quot;){
        output = 8;
    }
    else if (Card == &amp;quot;Seven&amp;quot;){
        output = 7;
    }
    else if (Card == &amp;quot;Six&amp;quot;){
        output = 6;
    }
    else if (Card == &amp;quot;Five&amp;quot;){
        output = 5;
    }
    else if (Card == &amp;quot;Four&amp;quot;){
        output = 4;
    }
    else if (Card == &amp;quot;Three&amp;quot;){
        output = 3;
    }
    else if (Card == &amp;quot;Two&amp;quot;){
        output = 2;
    }
    else
    {
        output = 0;
    }
    return output;
}&lt;/p&gt;

vector&amp;lt;string&amp;gt; wordCreater(string input)
{
    vector&amp;lt;string&amp;gt; output;
    // Let&#39;s get the name out of the way first
    size_t currentStartPos = input.find_first_of(&#39;:&#39;);
    string temp = input.substr(0, currentStartPos);
    output.push_back(temp);
    size_t increaser = currentStartPos;
    do
    {
        currentStartPos = increaser + 2;    //Assuming there&#39;s a space after the delimiter
        increaser = input.find_first_of(&#39;,&#39;, currentStartPos);
        temp = input.substr(currentStartPos, increaser - currentStartPos);
        output.push_back(temp);
    } while (increaser != string::npos);
    return output;
}&lt;/p&gt;

string getCardVal(string input)
{
    //We know the first word is the card value, so just get that
    size_t FirstSpacePosition = input.find_first_of(&#39; &#39;);
    return input.substr(0, FirstSpacePosition);
}&lt;/p&gt;

template &amp;lt;typename T&amp;gt;
void deletePtr(T* const ptr)
{
    delete ptr;
}&lt;/p&gt;

bool comparePlayers(Player* i, Player* j)
{
    if (i-&amp;gt;folded &amp;amp;&amp;amp; j-&amp;gt;folded)
        return true; //doesn&#39;t even matter&lt;/p&gt;

    if (i-&amp;gt;folded &amp;amp;&amp;amp; !j-&amp;gt;folded)
    {
        return true;
    }
    else if (!i-&amp;gt;folded &amp;amp;&amp;amp; j-&amp;gt;folded)
    {
        return false;
    }
    //Check for 5 card trick
    else if (i-&amp;gt;NumberOfCards &amp;gt;= 5)
    {
        return false;
    }
    else if (j-&amp;gt;NumberOfCards &amp;gt;= 5)
    {
        return true;
    }
    // both are either not folded
    else if (i-&amp;gt;bestTotal &amp;lt; j-&amp;gt;bestTotal)
        return true;
    else
        return false;
}
int main(int argc, const char** argv)
{
    vector&amp;lt;Player*&amp;gt; Players;
    // Get the number of
    int NumberOfPlayers = 0;
    string temp;
    getline(cin, temp);&lt;/p&gt;

    NumberOfPlayers = atoi(&amp;amp;temp[0]);
    for (int i; i &amp;lt; NumberOfPlayers; i++)
    {
        getline(cin, temp);
        Player* player = new Player();
        vector&amp;lt;string&amp;gt; tokens = wordCreater(temp);
        player-&amp;gt;Name = tokens[0];&lt;/p&gt;

        for (vector&amp;lt;string&amp;gt;::iterator iter = tokens.begin() + 1; iter != tokens.end(); iter++){
            string cardValue = getCardVal(*iter);
            player-&amp;gt;AddValue(ConvertCardToInt(cardValue));
        }
        Players.push_back(player);
    }
    sort(Players.begin(), Players.end(), comparePlayers);&lt;/p&gt;

    //Winner
    if (!(*(Players.end() - 1))-&amp;gt;folded)
    {
        string trick = ((*(Players.end() - 1))-&amp;gt;NumberOfCards &amp;gt;= 5 ) ? &amp;quot; with a 5-card trick!&amp;quot; : &amp;quot;!&amp;quot;;
        cout &amp;lt;&amp;lt; &amp;quot;\n&amp;quot; + (*(Players.end() - 1))-&amp;gt;Name + &amp;quot; has won&amp;quot; + trick;
    }
    else
        printf(&amp;quot;\nNo one won!&amp;quot;);&lt;/p&gt;

    //clean up
    for_each(Players.begin(), Players.end(), deletePtr&amp;lt;Player&amp;gt;);&lt;/p&gt;

    return 0;
}[/code]&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/c++/2014/07/12/11/</link>
        <guid isPermaLink="true">http://yourdomain.com/c++/2014/07/12/11/</guid>
        
        <category>C++</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Vector vs. Arrays</title>
        <description>&lt;p&gt;There aren&#39;t a whole lot of differences between Vectors and Arrays internally (i.e. in terms of performance). Vectors use an array structure internally but have additional functions to manage it. Some advantages of a vector are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can dynamically allocate vectors without knowing the exact size at the time of conception. This means that handling vectors will be safer in the long run. You need not be extra careful to exceed the boundaries of a vector. Vectors require more space however. If you want to add to a vector, and the vector is at capacity, it will double its capacity and copy all the contents. This will increase memory usage but improve flexibility&lt;/li&gt;
&lt;li&gt;Vectors have additional functionality such as &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;capacity&lt;/code&gt; which are very useful.&lt;/li&gt;
&lt;li&gt;Here is a great &lt;a href=&quot;http://stackoverflow.com/questions/6462985/c-stl-vector-vs-array-in-the-real-world&quot;&gt;response&lt;/a&gt; I found on StackOverflow to this:
&lt;blockquote&gt;&lt;p&gt;One of the best reasons to use a vector as opposed to an array is the RAII idiom. Basically, in order for c++ code to be exception-safe, any dynamically allocated memory or other resources should be encapsulated within objects. These objects should have destructors that free these resources.&lt;/p&gt;
&lt;p&gt;When an exception goes unhandled, the ONLY things that are gaurenteed to be called are the destructors of objects on the stack. If you dynamically allocate memory outside of an object, and an uncaught exception is thrown somewhere before it is deleted, you have a memory leak.&lt;/p&gt;
&lt;p&gt;It&#39;s also a nice way to avoid having to remember to use delete.&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 11 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/c++/2014/07/11/vector-vs-arrays/</link>
        <guid isPermaLink="true">http://yourdomain.com/c++/2014/07/11/vector-vs-arrays/</guid>
        
        <category>C++</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>Challenge 1: Accepting console input</title>
        <description>&lt;p&gt;Lets read in strings. we will give n the number of strings then the strings.
&lt;!--more--&gt;
Example:
&lt;code&gt;5
Huey
Dewey
Louie
Donald
Scrooge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Seemed like a fairly simple first challenge on my road to recovery back to C++. Here is my first attempt:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberOfStrings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberOfStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllStrings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumberOfStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberOfStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;The strings inputted were:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberOfStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although this is okay, especially for the example in question, it is not really the best solution. First of all it uses arrays, which are looked down upon for scalability. Secondly, I need to remember to delete the array to prevent memory leaks. Second of all, &lt;code&gt;cin&lt;/code&gt; considers spaces as end of lines, which is not good for more complex phrases such as:&lt;/p&gt;

&lt;blockquote&gt;

&lt;code&gt;Hello how are you?
I&#39;m fine thanks!
And yourself?&lt;/code&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a more revised version of the same program:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Vector is a more powerful data structure&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;getline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//cin.ignore();   //needed to clear the buffer it seems.&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;getline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;myStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;The strings inputted were: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The main changes include the usage of vectors which are more scalable and the use of getline to get the strings which include spaces and such. This solution seems more elegant.&lt;/p&gt;

</description>
        <pubDate>Fri, 11 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/c++/2014/07/11/challenge-1-accepting-console-input/</link>
        <guid isPermaLink="true">http://yourdomain.com/c++/2014/07/11/challenge-1-accepting-console-input/</guid>
        
        <category>C++</category>
        
        <category>practice</category>
        
        
        <category>c++</category>
        
      </item>
    
  </channel>
</rss>
